name: CI

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'doc/**'
      - 'README.md'
      - '.readthedocs.yaml'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'doc/**'
      - 'README.md'
      - '.readthedocs.yaml'
  workflow_dispatch:

jobs:
  ubuntu-2004:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0

      - name: Setup OpenCV
        uses: Dovyski/setup-opencv-action@v1
        with:
          opencv-version: 4.0.0
          opencv-extra-modules: false
          
      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y make gcc patchelf

      - name: Build all
        run: |
          git fetch --tags --force
          git describe --always --long --dirty --abbrev=10 --tags | awk '{print "\""$0"\""}' > git_tag.inc
          sed -i 's/git_tag.inc/git_tag.ci.inc/g' YUVviewer.pro
          sed -i 's/QT_DIR=\/opt/QT_DIR=$(cd "$(dirname "$0")";pwd)/g' build_deb.sh
          sed -i 's/\/home\/xiaoming\/Desktop\/opencv/\/usr\/local/g' build_deb.sh
          sed -i 's/\/home\/xiaoming\/Desktop\/opencv/\/usr\/local/g' partform_unix.pri
          ./build_deb.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: YUVviewer_Ubuntu2004
          path: |
            ./dpkg/*.deb

      - name: Run tests
        run: |
          if ls ./dpkg | grep ".deb" ; then echo "Pass"; else echo "Failed" && exit 1; fi; 
          timeout --foreground -s SIGKILL 20s ./dpkg/YUVviewer_Linux_*/opt/YUVviewer/YUVviewer --version > >(tee run.log) || {
            if cat run.log | grep "YUVviewer" ; then echo "Pass" && exit 0; else echo "Failed" && exit 1; fi; 
          }

  ubuntu-1804:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0

      - name: Setup OpenCV
        uses: Dovyski/setup-opencv-action@v1
        with:
          opencv-version: 4.0.0
          opencv-extra-modules: false

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y make gcc patchelf

      - name: Build all
        run: |
          git fetch --tags --force
          git describe --always --long --dirty --abbrev=10 --tags | awk '{print "\""$0"\""}' > git_tag.inc
          sed -i 's/git_tag.inc/git_tag.ci.inc/g' YUVviewer.pro
          sed -i 's/QT_DIR=\/opt/QT_DIR=$(cd "$(dirname "$0")";pwd)/g' build_deb.sh
          sed -i 's/\/home\/xiaoming\/Desktop\/opencv/\/usr\/local/g' build_deb.sh
          sed -i 's/\/home\/xiaoming\/Desktop\/opencv/\/usr\/local/g' partform_unix.pri
          ./build_deb.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: YUVviewer_Ubuntu1804
          path: |
            ./dpkg/*.deb

      - name: Run tests
        run: |
          if ls ./dpkg | grep ".deb" ; then echo "Pass"; else echo "Failed" && exit 1; fi; 
          timeout --foreground -s SIGKILL 20s ./dpkg/YUVviewer_Linux_*/opt/YUVviewer/YUVviewer --version > >(tee run.log) || {
            if cat run.log | grep "YUVviewer" ; then echo "Pass" && exit 0; else echo "Failed" && exit 1; fi; 
          }
      
  windows:
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          arch: win64_mingw81
          
      - name: Install prerequisites
        run: |
          Choco-Install -PackageName innosetup --force
          Choco-Install -PackageName cmake --force
          git clone https://github.com/opencv/opencv.git --branch 4.0.0 --depth 1
          cmake -G "MinGW Makefiles" -S opencv -B opencv/build -D CMAKE_INSTALL_PREFIX=C:/opencv4.0.0 -D ENABLE_PRECOMPILED_HEADERS=OFF -D WITH_MSMF=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D BUILD_WITH_DEBUG_INFO=OFF -D BUILD_DOCS=OFF -D CMAKE_BUILD_TYPE=RELEASE
          cd ./opencv/build
          mingw32-make
          mingw32-make install

      - name: Build all
        run: |
          git fetch --tags --force
          git describe --always --long --dirty --abbrev=10 --tags | ./tools/awk/awk.exe '{print \"\\\"\"$0\"\\\"\"}'  > git_tag.inc
          ./tools/sed/sed.exe -i "s/git_tag.inc/git_tag.ci.inc/g" YUVviewer.pro
          ./tools/sed/sed.exe -i "s/QT_DIR=C:\/Qt\/Qt5.12.8\/5.12.8\/mingw73_32\/bin/QT_DIR=%Qt5_Dir%/g" ./build_setup.bat
          ./tools/sed/sed.exe -i "s/QT_TOOLS_DIR=C:\/Qt\/Qt5.12.8\/Tools\/mingw730_32\/bin/QT_TOOLS_DIR=C:\/ProgramData\/Chocolatey\/lib\/mingw\/tools\/install\/mingw64\/x86_64-w64-mingw32\/bin/g" ./build_setup.bat
          ./tools/sed/sed.exe -i "s/OPENCV_DIR=D:\/Qt\/opencv4.2.0\/x64\/mingw\/bin/OPENCV_DIR=C:\/opencv4.0.0\/x64\/mingw\/bin/g" ./build_setup.bat
          ./tools/sed/sed.exe -i "s/libopencv_imgproc420/libopencv_imgproc400/g" ./build_setup.bat
          ./tools/sed/sed.exe -i "s/libopencv_core420/libopencv_core400/g" ./build_setup.bat
          ./tools/sed/sed.exe -i "s/OPENCV_DIR=D:\\Qt\\opencv4.2.0/OPENCV_DIR=C:\\opencv4.0.0/g" ./partform_win32.pri
          ./build_setup.bat

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: YUVviewer_windows
          path: |
            ./InnoSetup/YUVviewer_setup.exe

      - name: Run tests
        run: |
          ./InnoSetup/build/YUVviewer.exe --version

  macos:
    runs-on: macos-10.15

    steps:
      - uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0

      - name: Install prerequisites
        run: |
          ruby - e  "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null  2 > /dev/null
          brew install --build-from-source cmake
          git clone https://github.com/opencv/opencv.git --branch 4.0.0 --depth 1
          cmake -S opencv -B opencv/build -D ENABLE_PRECOMPILED_HEADERS=OFF -D WITH_MSMF=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D BUILD_WITH_DEBUG_INFO=OFF -D BUILD_DOCS=OFF -D CMAKE_BUILD_TYPE=RELEASE
          cd ./opencv/build
          make
          sudo make install

      - name: Build all
        run: |
          git fetch --tags --force
          git describe --always --long --dirty --abbrev=10 --tags | awk '{print "\""$0"\""}' > git_tag.inc
          sed -i'.original' -e 's/git_tag.inc/git_tag.ci.inc/g' YUVviewer.pro
          sed -i'.original' -e 's/QT_DIR=\/opt/QT_DIR=$(cd "$(dirname "$0")";pwd)/g' build_deb.sh
          sed -i'.original' -e 's/\/home\/xiaoming\/Desktop\/opencv/\/usr\/local/g' build_deb.sh
          sed -i'.original' -e 's/\/home\/xiaoming\/Desktop\/opencv/\/usr\/local/g' partform_unix.pri
          ./build_dmg.sh

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: YUVviewer_macos
          path: |
            ./build_release/out
